const axios = require('axios');
const { execSync } = require('child_process');

// API endpoint
const API_URL = 'http://localhost:5000/api';

// Test configuration
const TEST_CONFIG = {
    vpc: {
        name: 'test-vpc'
        // Random CIDR will be generated by the API
    },
    vm: {
        name: 'test-vm',
        network_name: 'test-vpc',
        cpu_cores: 1,
        memory_mb: 1024,
        disk_size_gb: 10,
        image_id: 'ubuntu-20.04'  // Using the official Ubuntu 20.04 image ID
    }
};

// Helper function for API calls
async function apiCall(method, endpoint, data = null) {
    try {
        const url = `${API_URL}${endpoint}`;
        console.log(`Making ${method} request to: ${url}`);
        
        const response = await axios({
            method: method,
            url: url,
            data: data,
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        return response.data;
    } catch (error) {
        console.error(`API call error: ${error.message}`);
        if (error.response) {
            console.error(`Response status: ${error.response.status}`);
            console.error(`Response data: ${JSON.stringify(error.response.data)}`);
            return error.response.data;
        }
        throw error;
    }
}

// Test functions
async function testHealthCheck() {
    console.log('\nüè• Testing Health Check...');
    const result = await apiCall('GET', '/health');
    console.log('Health Status:', result.status);
    return result;
}

async function testListImages() {
    console.log('\nüì∏ Testing List Images...');
    const result = await apiCall('GET', '/images');
    console.log('Available Images:', result.images);
    return result;
}

async function testVPCOperations() {
    console.log('\nüåê Testing VPC Operations...');
    
    // First try to delete any existing test VPC to ensure a clean state
    try {
        console.log(`Cleaning up existing VPC ${TEST_CONFIG.vpc.name} if it exists...`);
        await apiCall('DELETE', `/vpcs/${TEST_CONFIG.vpc.name}`);
        // Give the server a moment to clean up
        await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
        // Ignore errors here - it's expected if the VPC doesn't exist
    }
    
    // Now create a new VPC
    console.log('Creating VPC...');
    const createResponse = await apiCall('POST', '/vpcs', TEST_CONFIG.vpc);
    console.log(`VPC Created: ${createResponse.vpc.name}`);
    
    // Get VPC details
    const getResponse = await apiCall('GET', `/vpcs/${TEST_CONFIG.vpc.name}`);
    console.log(`VPC Details: ${getResponse.vpc.name}, CIDR: ${getResponse.vpc.cidr}`);
    
    // List all VPCs
    const listResponse = await apiCall('GET', '/vpcs');
    console.log(`Number of VPCs: ${listResponse.vpcs.length}`);
    
    // Keep the VPC for VM tests
}

async function testVMOperations() {
    console.log("Testing VM operations...");
    try {
        // Create VM
        console.log("Creating VM...");
        
        // Check if VM already exists and delete it
        try {
            const vmCheck = await apiCall('GET', `/vms/${TEST_CONFIG.vm.name}`);
            if (vmCheck && !vmCheck.error) {
                console.log(`VM ${TEST_CONFIG.vm.name} already exists, deleting it first...`);
                await apiCall('DELETE', `/vms/${TEST_CONFIG.vm.name}`);
            }
        } catch (e) {
            // VM doesn't exist, which is what we want
            console.log("No existing VM found, proceeding with creation...");
        }
        
        // Create a new VM
        console.log("Sending request to create VM:", JSON.stringify(TEST_CONFIG.vm, null, 2));
        const createResponse = await apiCall('POST', '/vms', TEST_CONFIG.vm);
        console.log("VM creation response:", JSON.stringify(createResponse, null, 2));
        
        if (createResponse.error) {
            throw new Error(`Failed to create VM: ${createResponse.error}`);
        }
        
        // Allow VM to start up
        console.log("Waiting 5 seconds for VM to start...");
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // Get VM details
        console.log("Getting VM details...");
        const vm = await apiCall('GET', `/vms/${TEST_CONFIG.vm.name}`);
        console.log(`VM details: ${JSON.stringify(vm, null, 2)}`);
        
        // Get VM status
        console.log("Getting VM status...");
        const status = await apiCall('GET', `/vms/${TEST_CONFIG.vm.name}/status`);
        console.log(`VM status: ${JSON.stringify(status, null, 2)}`);
        
        console.log("VM operations tests passed!");
        return true;
    } catch (error) {
        console.error(`VM operations failed: ${error.message}`);
        if (error.response) {
            console.error("Response data:", error.response.data);
            console.error("Response status:", error.response.status);
        }
        return false;
    }
}

async function testDiskOperations() {
    console.log('\nüíæ Testing Disk Operations...');
    
    // List Disks
    console.log('Listing Disks...');
    const listResult = await apiCall('GET', '/disks');
    console.log('Disks:', listResult.disks);
    
    // Create Disk
    console.log('Creating Disk...');
    const createResult = await apiCall('POST', '/disks/create', {
        name: 'test-disk',
        size_gb: 5
    });
    console.log('Disk Created:', createResult.disk);
    
    return { listResult, createResult };
}

async function cleanup() {
    console.log('\nüßπ Cleaning up...');
    
    try {
        // Delete VM if it exists
        console.log('Deleting VM...');
        try {
            await apiCall('DELETE', `/vms/${TEST_CONFIG.vm.name}`);
            console.log('VM deleted successfully');
        } catch (error) {
            console.log(`VM deletion skipped: ${error.response?.data?.error || error.message}`);
        }
        
        // Wait briefly to ensure VM is fully removed before trying to delete the VPC
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Delete VPC if it exists
        console.log('Deleting VPC...');
        try {
            await apiCall('DELETE', `/vpcs/${TEST_CONFIG.vpc.name}`);
            console.log('VPC deleted successfully');
        } catch (error) {
            console.log(`VPC deletion skipped: ${error.response?.data?.error || error.message}`);
        }
        
        console.log('Cleanup completed successfully');
    } catch (error) {
        console.error('Error during cleanup:', error.message);
    }
}

// Main test runner
async function runTests() {
    console.log('üöÄ Starting API Tests...');
    
    try {
        // First make sure any previous test resources are cleaned up
        await cleanup();
        
        // Run the tests
        await testHealthCheck();
        await testListImages();
        
        // VPC and VM tests
        await testVPCOperations();
        await testVMOperations();
        await testDiskOperations();
        
        console.log('\n‚úÖ All tests passed successfully!');
    } catch (error) {
        console.error('\n‚ùå Test suite failed:', error.response?.data?.error || error.message);
    } finally {
        // Always run cleanup, regardless of test success or failure
        await cleanup();
    }
    
    process.exit(0);
}

// Run the tests
runTests(); 